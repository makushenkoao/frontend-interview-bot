{
  "html": [
    {
      "id": 1,
      "text": "Какой тег используется для создания ссылки?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<link>", "isCorrect": false },
        { "id": 2, "text": "<a>", "isCorrect": true },
        { "id": 3, "text": "<href>", "isCorrect": false },
        { "id": 4, "text": "<anchor>", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "text": "Какой тег используется для вставки изображения?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<img>", "isCorrect": true },
        { "id": 2, "text": "<picture>", "isCorrect": false },
        { "id": 3, "text": "<media>", "isCorrect": false },
        { "id": 4, "text": "<graphic>", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "text": "Какой тег находится в <html> определяет заголовок документа?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<head>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<meta>", "isCorrect": false }
      ]
    },
    {
      "id": 4,
      "text": "Какой атрибут используется для определения альтернативного текста изображения?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": false },
        { "id": 2, "text": "alt", "isCorrect": true },
        { "id": 3, "text": "title", "isCorrect": false },
        { "id": 4, "text": "href", "isCorrect": false }
      ]
    },
    {
      "id": 5,
      "text": "Какой атрибут позволяет открыть ссылку в новой вкладке?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "target=_blank", "isCorrect": true },
        { "id": 2, "text": "target=blank", "isCorrect": false },
        { "id": 3, "text": "target=_self", "isCorrect": false },
        { "id": 4, "text": "target=_new", "isCorrect": false }
      ]
    },
    {
      "id": 6,
      "text": "Для чего используется атрибут 'placeholder'?",
      "hasOptions": false,
      "answer": "Атрибут 'placeholder' используется для отображения текстовой подсказки или примера ввода в поле формы до того, как пользователь начнет вводить свои данные."
    },
    {
      "id": 7,
      "text": "Как создать непронумерованный список в HTML?",
      "hasOptions": false,
      "answer": "Для создания такого списка в HTML используется тег <code>ul</code>, а для определения каждого пункта списка - тег <code>li</code>."
    },
    {
      "id": 8,
      "text": "Что такое HTML?",
      "hasOptions": false,
      "answer": "HTML (HyperText Markup Language) - это стандартизированный язык разметки, который используется для создания и разработки веб-страниц. Это система для разметки отдельных частей веб-страницы с использованием тегов, заключенных в угловые скобки."
    },
    {
      "id": 9,
      "text": "Что делает тег <!DOCTYPE>?",
      "hasOptions": false,
      "answer": "`Это декларация, которая информирует веб-браузер о версии языка разметки, использованной при создании веб-страницы. Это помогает браузеру корректно отобразить страницу."
    },
    {
      "id": 10,
      "text": "Какой тег используется для создания таблицы?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<table>", "isCorrect": true },
        { "id": 2, "text": "<grid>", "isCorrect": false },
        { "id": 3, "text": "<row>", "isCorrect": false },
        { "id": 4, "text": "<column>", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Какой тег используется для создания заголовка таблицы?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<caption>", "isCorrect": false },
        { "id": 2, "text": "<th>", "isCorrect": false },
        { "id": 3, "text": "<thead>", "isCorrect": true },
        { "id": 4, "text": "<title>", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Какой тег используется для создания строки таблицы?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<td>", "isCorrect": false },
        { "id": 2, "text": "<row>", "isCorrect": false },
        { "id": 3, "text": "<line>", "isCorrect": false },
        { "id": 4, "text": "<tr>", "isCorrect": true }
      ]
    },
    {
      "id": 13,
      "text": "Какой тег используется для создания ячейки таблицы?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<cell>", "isCorrect": false },
        { "id": 2, "text": "<tr>", "isCorrect": false },
        { "id": 3, "text": "<th>", "isCorrect": false },
        { "id": 4, "text": "<td>", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Что такое семантические теги в HTML?",
      "hasOptions": false,
      "answer": "Семантические теги в HTML - это теги, которые передают информацию о смысле или назначении содержимого, а не только о его внешнем виде. Примеры семантических тегов: header, footer, article, section, nav и др. Они помогают создавать более структурированные и доступные веб-страницы."
    },
    {
      "id": 15,
      "text": "Какой атрибут используется для установки фонового изображения?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "background", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": false },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background-image", "isCorrect": true }
      ]
    },
    {
      "id": 16,
      "text": "Какой тег используется для создания выпадающего списка?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<dropdown>", "isCorrect": false },
        { "id": 2, "text": "<list>", "isCorrect": false },
        { "id": 3, "text": "<select>", "isCorrect": true },
        { "id": 4, "text": "<option>", "isCorrect": false }
      ]
    },
    {
      "id": 17,
      "text": "Какой тег используется для вставки JavaScript кода в HTML документ?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<javascript>", "isCorrect": false },
        { "id": 2, "text": "<script>", "isCorrect": true },
        { "id": 3, "text": "<js>", "isCorrect": false },
        { "id": 4, "text": "<java>", "isCorrect": false }
      ]
    },
    {
      "id": 18,
      "text": "Какой атрибут используется для указания пути к изображению?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": true },
        { "id": 2, "text": "href", "isCorrect": false },
        { "id": 3, "text": "path", "isCorrect": false },
        { "id": 4, "text": "url", "isCorrect": false }
      ]
    },
    {
      "id": 19,
      "text": "Что делает атрибут 'readonly' в элементе формы?",
      "hasOptions": false,
      "answer": "Атрибут 'readonly' делает элемент формы только для чтения, что значит, что пользователь не может изменять значение элемента, но может просматривать его. Это может быть полезно, если вы хотите отобразить информацию, которая не должна быть изменена."
    },
    {
      "id": 20,
      "text": "Что такое веб-стандарты и зачем они нужны?",
      "hasOptions": false,
      "answer": "Веб-стандарты - это рекомендации, разработанные группами стандартов, такими как W3C или WHATWG, для обеспечения совместимости и устойчивости веб-технологий. Они включают рекомендации по HTML, CSS, JavaScript и другим веб-технологиям. Соблюдение веб-стандартов помогает обеспечить корректную работу веб-страниц в различных браузерах и устройствах, а также облегчить обслуживание и расширение веб-сайтов в будущем."
    },
    {
      "id": 21,
      "text": "Что такое отзывчивый (responsive) веб-дизайн?",
      "hasOptions": false,
      "answer": "Это подход к веб-дизайну, который позволяет веб-страницам корректно отображаться и функционировать на различных устройствах, включая мобильные телефоны, планшеты и настольные компьютеры, путем использования гибких макетов, гибких изображений и CSS медиазапросов для адаптации дизайна к различным размерам экрана и характеристикам устройств."
    },
    {
      "id": 22,
      "text": "Какой тег HTML используется для вставки видео?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<media>", "isCorrect": false },
        { "id": 2, "text": "<video>", "isCorrect": true },
        { "id": 3, "text": "<movie>", "isCorrect": false },
        { "id": 4, "text": "<multimedia>", "isCorrect": false }
      ]
    },
    {
      "id": 23,
      "text": "Какой тег используется для создания главного заголовка на веб-странице?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<h1>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<head>", "isCorrect": false }
      ]
    },
    {
      "id": 24,
      "text": "Что делает тег <br>?",
      "hasOptions": false,
      "answer": "Он спользуется для переноса строки, что позволяет создать новую строку в том месте, где он размещен. Это удобный способ управления расположением текста на веб-странице без использования дополнительных стилей или элементов."
    },
    {
      "id": 25,
      "text": "Какой тег используется для создания упорядоченного списка?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<ul>", "isCorrect": false },
        { "id": 2, "text": "<ol>", "isCorrect": true },
        { "id": 3, "text": "<li>", "isCorrect": false },
        { "id": 4, "text": "<list>", "isCorrect": false }
      ]
    },
    {
      "id": 26,
      "text": "Что такое DOM в контексте веб-разработки?",
      "hasOptions": false,
      "answer": "DOM (Document Object Model) - это программный интерфейс для веб-документов. Это представление структурированного документа в виде объектной модели, которое позволяет программам и скриптам взаимодействовать с содержимым, структурой и стилями веб-страницы. DOM представляет документ как дерево объектов, каждый из которых соответствует части страницы."
    },
    {
      "id": 27,
      "text": "Какой атрибут используется для определения стилей элемента на странице?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "style", "isCorrect": true },
        { "id": 2, "text": "css", "isCorrect": false },
        { "id": 3, "text": "styles", "isCorrect": false },
        { "id": 4, "text": "stylesheet", "isCorrect": false }
      ]
    },
    {
      "id": 28,
      "text": "Что такое атрибут 'alt' в теге <img>?",
      "hasOptions": false,
      "answer": "Он используется для предоставления альтернативного текста, который будет отображаться в случае, если изображение не может быть загружено. Это также может быть полезно для обеспечения доступности, поскольку скрин-ридеры могут использовать этот текст для описания изображения пользователям с ограниченными возможностями."
    }
  ],
  "css": [
    {
      "id": 1,
      "text": "В чем разница между «сбросом» и «нормализацией» CSS? Что бы вы выбрали и почему?",
      "hasOptions": false,
      "answer": "Сброс (reset) сбрасывает все встроенные в браузер стили элементов. Normalize приводит стили к единому виду во всех браузерах. Лучше использовать Normalize из-за кроссбраузерности."
    },
    {
      "id": 2,
      "text": "Что такое специфичность селекторов CSS и как она работает?",
      "hasOptions": false,
      "answer": "Специфичность селектора (еще называют весом) это свойство определяющее приоритет стилевого правила, то есть то, какой стиль будет применен к HTML элементу в итоге. Например, используя какую-нибудь UI библиотеку, элементам этой библиотеки будут применены правила заданные авторами по умолчанию. При необходимости можно поменять стили на свои, «перебив» дефолтные более специфичным селектором.\n\nПодробнее тут: <a href='https://developer.mozilla.org/ru/docs/Web/CSS/Specificity' target='_blank'>Специфичность (MDN)</a>"
    },
    {
      "id": 3,
      "text": "Что такое CSS?",
      "hasOptions": false,
      "answer": "CSS (Cascading Style Sheets) - это язык стилей, используемый для описания внешнего вида и форматирования документа, написанного на языке разметки, таком как HTML. CSS позволяет разработчикам управлять макетом, шрифтами, цветами и другими стилистическими аспектами веб-страницы."
    },
    {
      "id": 4,
      "text": "Почему, как правило, лучше разместить подключение CSS в <head>, а <script> перед тэгом </body>? Знаете ли вы какие-либо исключения, приведите примеры?",
      "hasOptions": false,
      "answer": "Стили рекомендуется подключать в head для того, чтобы страница как можно быстрее приняла свой внешний вид. Скрипты подключенные в head могут затормозить этот процесс, в связи с этим их рекомендуется подключать перед закрывающим тегом body. Исключением являются скрипты аналитики, для определения количества посетителей, которые не дождались загрузки страницы. В этом случае скрипт должен быть подключен в head."
    },
    {
      "id": 5,
      "text": "Что делает свойство 'z-index' в CSS?",
      "hasOptions": false,
      "answer": "Свойство 'z-index' в CSS контролирует стековый порядок элементов по оси Z. Элемент с большим значением 'z-index' будет отображаться поверх элемента с меньшим значением 'z-index'."
    },
    {
      "id": 6,
      "text": "Какие есть способы отцентровать div?",
      "hasOptions": false,
      "answer": "Существует несколько способов отцентровать div в CSS, вот некоторые из них: \n1. Использование свойств margin и auto: `margin: 0 auto;`.\n2. Использование Flexbox: `display: flex; justify-content: center; align-items: center;`.\n3. Использование Grid Layout: `display: grid; place-items: center;`.\n4. Использование свойств text-align и inline-block: `text-align: center;` на родительском элементе и `display: inline-block;` на самом div.`."
    },
    {
      "id": 7,
      "text": "Какое свойство используется для установки цвета фона?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "color", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": true },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Какое свойство позволяет установить внешние отступы элемента?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "padding", "isCorrect": false },
        { "id": 2, "text": "border", "isCorrect": false },
        { "id": 3, "text": "margin", "isCorrect": true },
        { "id": 4, "text": "spacing", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Какое свойство используется для установки шрифта?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "font-weight", "isCorrect": false },
        { "id": 2, "text": "font-style", "isCorrect": false },
        { "id": 3, "text": "text-font", "isCorrect": false },
        { "id": 4, "text": "font-family", "isCorrect": true }
      ]
    },
    {
      "id": 10,
      "text": "Какое свойство CSS позволяет контролировать видимость элемента в DOM, но при этом сохраняет его место?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "display: none", "isCorrect": false },
        { "id": 2, "text": "visibility: hidden", "isCorrect": true },
        { "id": 3, "text": "is-visible: 0", "isCorrect": false },
        { "id": 4, "text": "color: transparent", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Какое свойство CSS используется для установки теней элементов?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "box-shadow", "isCorrect": true },
        { "id": 2, "text": "text-shadow", "isCorrect": false },
        { "id": 3, "text": "shadow", "isCorrect": false },
        { "id": 4, "text": "border-shadow", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Какой селектор выбирает все элементы .child, которые являются непосредственными дочерними элементами .parent?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": ".parent + .child", "isCorrect": false },
        { "id": 2, "text": ".parent ~ .child", "isCorrect": false },
        { "id": 3, "text": ".parent > .child", "isCorrect": true },
        { "id": 4, "text": ".parent .child", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Какой селектор CSS выбирает все элементы, которые имеют указанный атрибут, начинающийся с определенной строки?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr^=value]", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Какой селектор CSS выбирает все элементы, которые имеют указанный атрибут, заканчивающийся определенной строкой?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr$=value]", "isCorrect": true }
      ]
    }
  ],
  "javascript": [
    {
      "id": 1,
      "text": "Что такое чистая функция?",
      "hasOptions": false,
      "answer": "Это функция, которая возвращает одинаковый результат, когда вызывается с одним и тем же набором аргументов, а также не имеет побочных эффектов (side effects)"
    },
    {
      "id": 2,
      "text": "Что такое замыкание?",
      "hasOptions": false,
      "answer": "Замыкания – это способность функции запоминать лексическое окружение, в котором она была создана, то есть хранить в себе ссылку на это окружение и обращаться к нему.\n\n<a href='https://youtu.be/mI6Jcfsgma4?si=46DV3mXPF6mDTTPs' target='_blank'>Подробнейшее видео про замыкание</a>"
    },
    {
      "id": 3,
      "text": "let VS const: почему лучше использовать const, когда это возможно?",
      "hasOptions": false,
      "answer": "Использование const дает два преимущества:\n1) Безопасность: объявление переменных через const защищает от неожиданного изменения значения переменной в коде, что может часто приводит к ошибкам и неожиданному поведению программы.\n2) Читаемость: использование const позволяет читателю кода понимать, что значение переменной не будет изменяться в течение выполнения программы. Это делает код более понятным и уменьшает возможность ошибок.\n\nПодробнее: <a href='https://youtu.be/07FllcTRj84?si=q7v60ZvHYBoRSSen' target='_blank'>Видео про VAR/LET/CONST</a>"
    },
    {
      "id": 4,
      "text": "Что такое промисы (Promises) в JavaScript?",
      "hasOptions": false,
      "answer": "Промисы – это объекты, которые представляют результат асинхронной операции. Они могут находиться в одном из трех состояний: ожидание (pending), выполнено (fulfilled) или отклонено (rejected)."
    },
    {
      "id": 5,
      "text": "Что такое деструктуризация в JavaScript?",
      "hasOptions": false,
      "answer": "Деструктуризация позволяет извлекать отдельные свойства из объектов или элементы из массивов и присваивать их переменным в более удобной форме. Например, вот так мы можем одной строкой извлечь имя и адрес пользователя из объекта user:\n<code>const {name, address} = user;</code>"
    },
    {
      "id": 6,
      "text": "Что такое стрелочные функции в JavaScript?",
      "hasOptions": false,
      "answer": "Стрелочные функции — это синтаксически компактный способ записи функций в JavaScript, который не имеет своего собственного 'this'. Они часто используются для создания анонимных функций.\n\n<a href='https://youtu.be/nGVYdna4kq4?si=1k0J9F-MYxWCaq6M' target='_blank'>Подробное видео про функции в JS</a>"
    },
    {
      "id": 7,
      "text": "Что такое hoisting в JavaScript?",
      "hasOptions": false,
      "answer": "Hoisting — это механизм в JavaScript, при котором переменные и объявления функций перемещаются на верх своей области видимости перед выполнением кода."
    },
    {
      "id": 8,
      "text": "Какой метод используется для добавления элемента в массив?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": false },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": true }
      ]
    },
    {
      "id": 9,
      "text": "Какой объект представляет текущее окно браузера?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "document", "isCorrect": false },
        { "id": 2, "text": "screen", "isCorrect": false },
        { "id": 3, "text": "window", "isCorrect": true },
        { "id": 4, "text": "browser", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "Какой оператор используется для сравнения на строгое равенство?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "==", "isCorrect": false },
        { "id": 2, "text": "===", "isCorrect": true },
        { "id": 3, "text": "=", "isCorrect": false },
        { "id": 4, "text": "!==", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Какой метод используется для удаления последнего элемента из массива?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": true },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Какой метод в JavaScript используется для преобразования объекта в строку JSON?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "JSON.stringify()", "isCorrect": true },
        { "id": 2, "text": "JSON.parse()", "isCorrect": false },
        { "id": 3, "text": "JSON.toText()", "isCorrect": false },
        { "id": 4, "text": "JSON.toString()", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Какой объект в JavaScript используется для работы с датой и временем?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Time", "isCorrect": false },
        { "id": 2, "text": "Date", "isCorrect": true },
        { "id": 3, "text": "Calendar", "isCorrect": false },
        { "id": 4, "text": "DateTime", "isCorrect": false }
      ]
    },
    {
      "id": 14,
      "text": "Какой метод массива в JavaScript используется для фильтрации элементов по определенному критерию?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "map()", "isCorrect": false },
        { "id": 2, "text": "filter()", "isCorrect": true },
        { "id": 3, "text": "reduce()", "isCorrect": false },
        { "id": 4, "text": "forEach()", "isCorrect": false }
      ]
    },
    {
      "id": 15,
      "text": "Что такое замыкание (closure) в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это способность функции запоминать переменные из своего внешнего окружения, в котором она была объявлена.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это механизм в JavaScript, который позволяет объединять функции вместе для улучшения их производительности.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это специальный тип объектов в JavaScript, используемый для создания анонимных функций.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это метод оптимизации кода в JavaScript, который позволяет ускорить выполнение функций.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 16,
      "text": "Что такое прототипное наследование (prototype inheritance) в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это механизм наследования в JavaScript, при котором объекты могут наследовать свойства и методы от других объектов.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это способ организации кода в JavaScript, который позволяет создавать модули для повторного использования.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это функция в JavaScript, которая позволяет создавать новые экземпляры объектов на основе других объектов.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это специальный тип переменной в JavaScript, который используется для хранения свойств объектов.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 17,
      "text": "Что такое стрелочные функции (arrow functions) в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это новый синтаксис для объявления функций в JavaScript, который предоставляет более краткую запись функций.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это специальный тип функций в JavaScript, которые всегда возвращают значение.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это функции в JavaScript, которые используются для обработки исключений в коде.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это методы, позволяющие управлять временем выполнения функций в JavaScript.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 18,
      "text": "Что такое область видимости (scope) в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это часть программы, в которой определены переменные и которая определяет доступ к этим переменным.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это механизм в JavaScript, который предотвращает доступ к определенным переменным из внешнего кода.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это специальный тип объектов в JavaScript, который используется для хранения значений переменных.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это функция в JavaScript, которая вызывается в результате ошибки в коде.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 19,
      "text": "Что такое замыкание (hoisting) в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это механизм в JavaScript, который поднимает объявления переменных и функций вверх в пределах текущей области видимости.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это способ объявления переменных в JavaScript, который позволяет иметь одинаковые имена переменных в разных областях видимости.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это метод оптимизации кода в JavaScript, который позволяет ускорить выполнение функций.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это специальный тип переменных в JavaScript, который не может быть изменен после его определения.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 20,
      "text": "Что такое Promise в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это объект, представляющий результат асинхронной операции и ее состояние (выполнено, отклонено или ожидание).",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это специальный метод в JavaScript, который позволяет создавать асинхронные функции.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это способ обработки ошибок в JavaScript, который используется в асинхронных функциях.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это объект в JavaScript, который используется для хранения данных в виде пар ключ-значение.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 21,
      "text": "Что такое async/await в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это новый синтаксис в JavaScript, который позволяет управлять асинхронными операциями более чисто и лаконично.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это специальные свойства объектов в JavaScript, которые предоставляют информацию о текущем состоянии объекта.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это методы в JavaScript, используемые для синхронизации выполнения функций.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это специальные функции в JavaScript, которые используются для обработки ошибок в асинхронных операциях.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 22,
      "text": "Что такое RESTful API?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это архитектурный стиль веб-сервисов, который использует HTTP протокол для создания масштабируемых и удобных в использовании API.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это методика программирования в JavaScript, которая предполагает использование только чистых функций без побочных эффектов.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это метод создания пользовательского интерфейса веб-приложений, использующий стандарты REST для передачи данных.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это способ организации кода в JavaScript, который предотвращает доступ к определенным переменным из внешнего кода.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 23,
      "text": "Что такое замыкание (callback) в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это функция, переданная в качестве аргумента в другую функцию и вызываемая внутри этой функции.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это специальный тип переменной в JavaScript, который используется для хранения ссылок на функции.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это объект в JavaScript, который предоставляет информацию о текущем состоянии объекта.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это способ определения функций в JavaScript, при котором функция доступна только внутри блока кода, в котором она объявлена.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 24,
      "text": "Что такое деструктуризация (destructuring) в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это специальный синтаксис в JavaScript, который позволяет извлекать данные из объектов или массивов и присваивать их переменным.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это метод работы с данными в JavaScript, который предполагает их уничтожение после использования.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это способ создания новых переменных в JavaScript, который используется для хранения результатов вычислений.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это функция в JavaScript, которая используется для создания новых экземпляров объектов.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 25,
      "text": "Что такое рекурсия (recursion) в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это процесс, при котором функция вызывает саму себя.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это способ определения функций в JavaScript, при котором функция доступна только внутри блока кода, в котором она объявлена.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это способ определения функций в JavaScript, который позволяет создавать функции, обладающие собственным контекстом выполнения.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это метод оптимизации кода в JavaScript, который позволяет ускорить выполнение функций.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 26,
      "text": "Что такое CORS (Cross-Origin Resource Sharing) веб-запросы в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это механизм, который позволяет ресурсам на одном домене запрашивать ресурсы с другого домена.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это специальный тип веб-запросов, который используется для передачи данных между клиентом и сервером в формате JSON.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это метод передачи данных между клиентом и сервером в JavaScript, который позволяет обновлять часть страницы без ее полной перезагрузки.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это способ защиты данных в JavaScript, который ограничивает доступ к ним из внешнего кода.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 27,
      "text": "Что такое объектно-ориентированное программирование (ООП) в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это подход к программированию, основанный на объектах, которые могут содержать данные в виде свойств и методы для их обработки.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это метод работы с данными в JavaScript, который предполагает их уничтожение после использования.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это специальный тип переменных в JavaScript, который используется для хранения данных в виде пар ключ-значение.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это функция в JavaScript, которая используется для создания новых экземпляров объектов.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 28,
      "text": "Что такое IIFE (Immediately Invoked Function Expression) в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это специальный тип функций в JavaScript, которые вызываются немедленно после своего объявления.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это метод, который используется для создания новых экземпляров объектов в JavaScript.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это функция в JavaScript, которая используется для создания новых переменных.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это способ определения функций в JavaScript, при котором функция доступна только внутри блока кода, в котором она объявлена.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 29,
      "text": "Что такое JSON (JavaScript Object Notation)?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это формат обмена данными, основанный на JavaScript, который используется для передачи структурированных данных между клиентом и сервером.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это способ создания новых объектов в JavaScript.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это метод работы с данными в JavaScript, который предполагает их уничтожение после использования.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это способ передачи данных между клиентом и сервером в JavaScript, который позволяет обновлять часть страницы без ее полной перезагрузки.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 31,
      "text": "Что такое обещание (Promise) в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это объект, представляющий результат асинхронной операции и его состояние (выполнено, отклонено или ожидание).",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это способ создания асинхронных функций в JavaScript.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это специальный тип функции в JavaScript, которая вызывается немедленно после ее объявления.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это объект в JavaScript, который используется для хранения данных в виде пар ключ-значение.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 32,
      "text": "Что такое асинхронность в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это способ организации кода в JavaScript, при котором последовательность выполнения операций не определена заранее.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это метод работы с данными в JavaScript, который позволяет избежать блокировки исполнения операций.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это специальный тип функции в JavaScript, которая выполняется сразу после своего объявления.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это объект в JavaScript, который используется для хранения асинхронных данных.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 33,
      "text": "Что такое асинхронная функция (async function) в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это специальный тип функции в JavaScript, который позволяет использовать ключевое слово 'await' для ожидания результата асинхронной операции.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это функция, которая вызывается немедленно после своего объявления.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это метод работы с данными в JavaScript, который позволяет избежать блокировки исполнения операций.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это объект в JavaScript, который используется для хранения асинхронных данных.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 34,
      "text": "Что такое fetch API в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это интерфейс в JavaScript для выполнения HTTP-запросов к серверу.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это специальный метод в JavaScript для создания асинхронных функций.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это метод работы с данными в JavaScript, который позволяет избежать блокировки исполнения операций.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это объект в JavaScript, который используется для хранения асинхронных данных.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 35,
      "text": "Что такое каррирование (currying) в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это техника преобразования функции с множеством аргументов в последовательность функций с одним аргументом.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это метод оптимизации кода в JavaScript, который позволяет ускорить выполнение функций.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это способ работы с данными в JavaScript, который предполагает их уничтожение после использования.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это способ определения функций в JavaScript, который позволяет создавать функции с ограниченным доступом.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 36,
      "text": "Что такое модули (modules) в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это фрагменты кода в JavaScript, которые могут быть использованы повторно в различных частях приложения.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это способ организации данных в JavaScript, который позволяет группировать их по определенным критериям.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это способ определения функций в JavaScript, который позволяет создавать функции с ограниченным доступом.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это способ работы с данными в JavaScript, который позволяет избежать блокировки исполнения операций.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 37,
      "text": "Что такое REST API?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это архитектурный стиль веб-сервисов, который использует HTTP протокол для создания масштабируемых и удобных в использовании API.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это специальный метод работы с данными в JavaScript, который позволяет избежать блокировки исполнения операций.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это способ организации данных в JavaScript, который позволяет группировать их по определенным критериям.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это способ определения функций в JavaScript, который позволяет создавать функции с ограниченным доступом.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 38,
      "text": "Что такое функциональное программирование (functional programming) в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это парадигма программирования, в которой функции рассматриваются как основной строительный блок программы.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это метод оптимизации кода в JavaScript, который позволяет ускорить выполнение функций.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это способ работы с данными в JavaScript, который позволяет избежать блокировки исполнения операций.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это способ определения функций в JavaScript, который позволяет создавать функции с ограниченным доступом.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 39,
      "text": "Что такое атомарные операции в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это операции, которые выполняются одновременно без возможности прерывания другими операциями.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это способ определения функций в JavaScript, который позволяет создавать функции с ограниченным доступом.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это метод работы с данными в JavaScript, который позволяет избежать блокировки исполнения операций.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это парадигма программирования, в которой функции рассматриваются как основной строительный блок программы.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 40,
      "text": "Что такое memoization в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это техника оптимизации кода, которая заключается в сохранении результатов выполнения функций для повторного использования.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это способ определения функций в JavaScript, который позволяет создавать функции с ограниченным доступом.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это метод работы с данными в JavaScript, который позволяет избежать блокировки исполнения операций.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это парадигма программирования, в которой функции рассматриваются как основной строительный блок программы.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 41,
      "text": "Что такое генераторы (generators) в JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это специальный тип функций в JavaScript, который может быть приостановлен и возобновлен в процессе выполнения.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это способ определения функций в JavaScript, который позволяет создавать функции с ограниченным доступом.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это метод работы с данными в JavaScript, который позволяет избежать блокировки исполнения операций.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это парадигма программирования, в которой функции рассматриваются как основной строительный блок программы.",
          "isCorrect": false
        }
      ]
    }
  ],
  "react": [
    {
      "id": 1,
      "text": "Что такое React JS?",
      "hasOptions": false,
      "answer": "React JS, или просто React, это открытая библиотека JavaScript для создания пользовательских интерфейсов, особенно для одностраничных приложений (SPA). Ключевые особенности React:\n1) Компонентный подход: React строится на концепции компонентов, что позволяет разработчикам создавать легко переиспользуемые куски кода;\n2) Виртуальный DOM: React использует виртуальный DOM для отслеживания изменений. Это абстракция реального DOM, что позволяет библиотеке обновлять только те части интерфейса, которые действительно изменились, вместо полного перерендеринга страницы. Это делает React относительно быстрым;\n3) Хуки: Введение хуков позволило использовать состояния и другие возможности классовых компонентов в функциональных компонентах, что сделало код более кратким и чистым;\n4) Сообщество и экосистема: React имеет большое и активное сообщество разработчиков, а также много библиотек и инструментов, созданных сообществом, что облегчает разработку сложных приложений.\n\nПодробнее: <a href='https://youtu.be/R_39q-vdOaE?si=mEKDaYDjEdnojG-N' target='_blank'>Введение в React (видео)</a>"
    },
    {
      "id": 2,
      "text": "Для чего нужен атрибут key при рендере списков?",
      "hasOptions": false,
      "answer": "Ключи (keys) помогают React определять, какие элементы были изменены, добавлены или удалены. Их необходимо указывать, чтобы React мог сопоставлять элементы массива с течением времени. Лучший способ выбрать ключ — это использовать строку, которая будет явно отличать элемент списка от его соседей. Лучше всего вы будете использовать ID из ваших данных как ключи. Индексы массива тоже можно использовать для этого, но только если элементы массива не добавляются в начало, не переставляются и не удаляются."
    },
    {
      "id": 3,
      "text": "Как работает проп children?",
      "hasOptions": false,
      "answer": "Некоторые компоненты не знают своих потомков заранее. Это особенно характерно для таких компонентов, как Sidebar или Dialog, которые представляют из себя как бы «коробку», в которую можно что-то положить. Для таких компонентов можно использовать специальный проп children, который передаст дочерние элементы сразу на вывод.\n\nПодробнее: <a href='https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children' target='_blank'>Документация React (eng)</a>"
    },
    {
      "id": 4,
      "text": "Что такое порталы в React?",
      "hasOptions": false,
      "answer": "Порталы позволяют рендерить дочерние элементы в DOM-узел, который находится вне DOM-иерархии родительского компонента. Типовой случай применения порталов — когда в родительском компоненте заданы стили overflow: hidden или z-index, но вам нужно, чтобы дочерний элемент визуально выходил за рамки своего контейнера. Чаще всего, это диалоговые окна, всплывающие карточки и всплывающие подсказки."
    },
    {
      "id": 5,
      "text": "Что такое Reconciliation (Cверка)?",
      "hasOptions": false,
      "answer": "Это процесс, посредством которого React обновляет DOM. Когда состояние компонента изменяется, React должен рассчитать необходимость обновления DOM. Это делается путем создания виртуального DOM и сравнения его с текущим DOM. В этом контексте виртуальный DOM будет содержать новое состояние компонента."
    },
    {
      "id": 6,
      "text": "Для чего используется хук useEffect в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Хранения состояния компонента",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Выполнения побочных эффектов",
          "isCorrect": true
        },
        { "id": 3, "text": "Мемоизации значений", "isCorrect": false },
        {
          "id": 4,
          "text": "Создания ссылок на DOM элементы",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 7,
      "text": "Что будет, если вторым аргументом в useEffect передать пустой массив []?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Ошибка", "isCorrect": false },
        {
          "id": 2,
          "text": "useEffect будет запущен 0 раз",
          "isCorrect": false
        },
        { "id": 3, "text": "useEffect будет запущен 1 раз", "isCorrect": true },
        { "id": 4, "text": "Нет верного ответа", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Какой хук используется для создания состояния в компоненте?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "useEffect", "isCorrect": false },
        { "id": 2, "text": "useState", "isCorrect": true },
        { "id": 3, "text": "useContext", "isCorrect": false },
        { "id": 4, "text": "useReducer", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Какой элемент используется для группировки элементов без добавления дополнительных узлов в DOM?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<Group>", "isCorrect": false },
        { "id": 2, "text": "<Div>", "isCorrect": false },
        { "id": 3, "text": "<Fragment> (<>)", "isCorrect": true },
        { "id": 4, "text": "<List>", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "У нас есть массив со строками (arr), каждую из которых мы хотим отразить на странице. Какой метод массива нужно применить в return компонента?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "{arr.forEach(...)}", "isCorrect": false },
        { "id": 2, "text": "{arr.filter(...)}", "isCorrect": false },
        { "id": 3, "text": "{arr.for(...)}", "isCorrect": false },
        { "id": 4, "text": "{arr.map(...)}", "isCorrect": true }
      ]
    },
    {
      "id": 11,
      "text": "Какой элемент используется для обработки ошибок в дереве компонентов?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "ErrorBoundary", "isCorrect": true },
        { "id": 2, "text": "CatchError", "isCorrect": false },
        { "id": 3, "text": "ErrorWrapper", "isCorrect": false },
        { "id": 4, "text": "ErrorCatcher", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Какой (какие) аргумент(ы) принимает хук useMemo?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Функцию и массив зависимостей", "isCorrect": true },
        { "id": 2, "text": "Функцию и объект опций", "isCorrect": false },
        { "id": 3, "text": "Функцию", "isCorrect": false },
        { "id": 4, "text": "Массив зависимостей", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Для чего используется хук useCallback в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Создания ссылок на DOM элементы",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Хранения состояния компонента",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Выполнения побочных эффектов",
          "isCorrect": false
        },
        { "id": 4, "text": "Мемоизации функций", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Что такое JSX в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это сокращение от JavaScript XML и представляет собой синтаксис расширения JavaScript для описания структуры пользовательского интерфейса.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это специальный тип переменной в React для хранения данных в виде HTML-подобной структуры.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это библиотека для работы с XML файлами в JavaScript, использованная в React для парсинга и создания компонентов.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это аббревиатура, обозначающая JavaScript Extension, используемую для добавления дополнительных возможностей к JavaScript коду в React приложениях.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 15,
      "text": "Что такое виртуальный DOM в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это виртуальное представление реального DOM, которое React использует для оптимизации производительности при рендеринге.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это специальная функция в React, которая эмулирует работу с реальным DOM для тестирования компонентов.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это метод для создания компонентов, используемый в React для отображения виртуальной реальности.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это функция, позволяющая взаимодействовать с графическими объектами в браузере, созданными с помощью React.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 16,
      "text": "Что такое компоненты высшего порядка (HOC) в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это специальные компоненты в React, которые отвечают за высокую производительность приложения.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Это компоненты, которые имеют доступ к контексту React и могут изменять его содержимое.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это функции, которые принимают компоненты в качестве аргументов и возвращают новые компоненты.",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": "Это специальные компоненты, которые можно использовать только вместе с другими компонентами определенного типа.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 17,
      "text": "Что такое порталы (Portals) в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это специальные компоненты React, которые могут быть помещены только в конкретные точки DOM дерева.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Это механизм в React, который позволяет рендерить дочерние компоненты в DOM узлы, находящиеся вне их иерархии.",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Это компоненты React, которые используются для управления навигацией в приложении.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это набор стандартных компонентов React, предназначенных для работы с аудио и видео файлами.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 18,
      "text": "Что такое контекст (Context) в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это специальный тип переменной в React, который используется для хранения глобального состояния приложения.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Это механизм в React, который позволяет передавать данные через дерево компонентов без необходимости передачи пропсов на каждом уровне.",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Это специальные компоненты в React, которые обеспечивают навигацию в приложении.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это компоненты в React, которые не имеют собственного состояния и рендерят только содержимое, переданное им через пропсы.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 19,
      "text": "Какой метод жизненного цикла React вызывается сразу после того, как компонент был вставлен в DOM?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "componentDidMount()",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "componentWillMount()",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "componentDidUpdate()",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "componentWillUpdate()",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 20,
      "text": "Что такое ключи (keys) в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это идентификаторы, используемые в React для уникальной идентификации дочерних элементов в списке.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это специальные атрибуты, используемые для создания событийных обработчиков в компонентах React.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это методы, позволяющие реагировать на изменения состояния компонента в React.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это специальные свойства, определяющие видимость или скрытость компонентов в React приложении.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 21,
      "text": "Что такое управляемые компоненты (controlled components) в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это компоненты React, управляемые с помощью внешних библиотек, таких как Redux.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Это компоненты, значения которых контролируются React и обновляются только через изменение состояния или свойств.",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Это компоненты, которые используются для отображения пользовательского интерфейса, но не могут взаимодействовать с ним.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это специальные компоненты, предназначенные для контроля и управления формами в React приложении.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 22,
      "text": "Что такое рефы (refs) в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это специальные свойства, используемые для определения дочерних компонентов в React.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Это функции, которые позволяют изменять состояние компонента React.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это объекты, используемые для доступа к DOM узлам или экземплярам компонентов в React.",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": "Это специальные методы, которые вызываются перед и после рендеринга компонентов в React.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 23,
      "text": "Что такое фрагменты (fragments) в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это специальные элементы в React, предназначенные для обертывания нескольких дочерних элементов без создания лишних уровней DOM.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это методы, позволяющие изменять состояние компонентов в React.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это специальные компоненты, используемые для создания анимации в React приложениях.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это функции, которые применяются для определения структуры и внешнего вида пользовательского интерфейса в React.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 24,
      "text": "Что такое хуки (hooks) в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это специальные компоненты React, используемые для создания пользовательских хуков.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Это функции, которые позволяют добавлять состояние и другие возможности React в функциональные компоненты.",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Это специальные свойства, используемые для передачи данных между компонентами в React.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это методы, позволяющие определять условия для рендеринга компонентов в React.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 25,
      "text": "Что такое lazy loading в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это способ загрузки асинхронных данных в React компонентах.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Это механизм в React, который позволяет откладывать загрузку определенных компонентов до тех пор, пока они не понадобятся.",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Это специальный тип компонентов в React, который загружается только при определенных условиях.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это функциональность React, позволяющая использовать ленивые вычисления для оптимизации производительности.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 26,
      "text": "Что такое мемоизация (memoization) в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это механизм в React, который используется для уменьшения объема памяти, занимаемой компонентами в приложении.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Это процесс оптимизации, при котором результаты выполнения функций кэшируются, чтобы избежать повторных вычислений с одними и теми же аргументами.",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Это метод, используемый в React для оптимизации производительности при рендеринге списков элементов.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это специальный тип компонентов в React, который используется для сохранения состояния приложения между сеансами работы пользователя.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 27,
      "text": "Что такое Error Boundary в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это компоненты React, которые отвечают за обработку ошибок, возникающих во время рендеринга.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это специальные функции в React, используемые для обработки исключений в коде.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это методы, позволяющие создавать асинхронные запросы к серверу в React компонентах.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это специальные свойства, используемые для обработки ошибок в React приложениях.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 28,
      "text": "Что такое PureComponent в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это специальный тип компонентов в React, который реализует метод shouldComponentUpdate для автоматической оптимизации производительности.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Это компоненты, которые автоматически обновляют свое состояние при изменении пропсов.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это специальные компоненты, используемые для рендеринга списков элементов в React приложениях.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это функциональные компоненты, которые реализуют механизм мемоизации для оптимизации производительности.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 29,
      "text": "Какой метод жизненного цикла React вызывается перед удалением компонента из DOM?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "componentWillUnmount()",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "componentDidUnmount()",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "componentWillUpdate()",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "componentDidUpdate()",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 30,
      "text": "Что такое стейт (state) в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это свойства компонентов React, которые не могут быть изменены после создания компонента.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Это объект, который содержит данные, управляемые компонентом и влияющие на его поведение и внешний вид.",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Это специальный тип компонентов в React, который используется для хранения состояния приложения.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это методы, позволяющие изменять состояние компонентов в React.",
          "isCorrect": false
        }
      ]
    }
  ]
}
